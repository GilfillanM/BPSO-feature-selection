#--------------------------------------------------------
# Create initial fitness and velocity values
#--------------------------------------------------------

# Maak initial fitness values vir elke particle 
init_fit <- matrix(0, ncol=1, nrow=n)

# Maak initial velocity values vir elke particle - formule volgens main paper
# v = -vmax + 2 s vmax
# s/init_vv between 0 and 1
init_vv <- matrix(runif(num_f*n, 0, 1), ncol=num_f, nrow=n)
init_v <- -vmax + 2*init_vv*vmax

#----------------------------------------------------------------
# Create initial particles for x, personal best and global best
#----------------------------------------------------------------

# MIXED STRATEGY
small <- round(num_f*(0.1))
large <- round(num_f*(0.5))
x_in_small <- matrix(0,nrow=n*(2/3),ncol = num_f)
x_in_large <- matrix(0,nrow=n*(1/3),ncol = num_f)

for (i in 1:n*(2/3)) {
  small_sample <- sample(1:num_f,small)
  x_in_small[i,small_sample] = 1
}

for (i in 1:n*(1/3)) {
  large_sample <- sample(1:num_f,large)
  x_in_large[i,large_sample] = 1
}
x_in <- rbind(x_in_small,x_in_large)


# OR RANDOM STRATEGY
#x_in = replicate(n,r_sample_binary(num_f, x = 0:1, prob = NULL, name = "Binary"),simplify=FALSE)
#x_in <- matrix(unlist(x_in), ncol=num_f, byrow = TRUE) # maak list net gou n matrix

# Create initial personal best positions for particles
pers_in <- replicate(n,r_sample_binary(num_f, x = 0:1, prob = NULL, name = "Binary"),simplify=FALSE)
pers_in <- matrix(unlist(pers_in), ncol=num_f, byrow = TRUE) # maak list net gou n matrix

# Create initial global best position for particles
global_best <- r_sample_binary(num_f, x = 0:1, prob = NULL, name = "Binary")


#--------------------------------------------------------
# OUTER LOOP BEGINS
#--------------------------------------------------------
# Empty matrices being filled
v <- matrix(0, nrow = n, ncol = num_f)
x_new <- matrix(0, nrow = n, ncol = num_f)
fitness_val = matrix(0,nrow = n,ncol = 1)
global_fit = matrix(0,nrow = m.l,ncol = 1)

# initialize a global fit that's very small because we want to maximise the fitness value
global_init_fit = 0
# Keeping global best apart from the reset global best
gl_avoid = 0
# For the mutations
dr = 1/num_f # displacement rate
check = 0 # globale best counter
counter = 0
for (q in 1:m.l){ # which iteration
  for (i in 1:n){ # which particle
    #-----------------------------------------
    # STEP 1: EVALUATE EACH PARTICLE IN SWARM
    #-----------------------------------------
    
    Y_idx = createDataPartition(data[,c(which(x_in[i,]==1),ncol(data))]$Y, p = 0.75, list = FALSE)
    Y_trn = data[Y_idx,c(which(x_in[i,]==1),ncol(data)) ]
    Y_trn$Y <- as.factor(Y_trn$Y)# because there are only two classes
    Y_tst = data[-Y_idx,c(which(x_in[i,]==1),ncol(data))]
    
    # Apply knn cross validation
    trControl <- trainControl(method  = "cv",
                              number  = 10)
    fit <- train(Y ~ .,
             method     = "knn",
             tuneGrid   = expand.grid(k = 5),
             trControl  = trControl,
             metric     = "Accuracy",
             data       = Y_trn)
    train_P <- fit$results$Accuracy
    # test set accuracy
    P <- calc_acc(actual = Y_tst$Y,
         predicted = predict(fit, newdata = Y_tst))
    
    E <- 1-P
    
    # Compute the fitness function
    alpha = 0.5 # clasification performance is just as NB as than number of features so alpha = 1-alpha
    div = sum(x_in[i,])/num_f
    fitness_val[i] = (1-alpha)*(1-E)+(alpha)*(1-div)
    
    
    #-----------------------------------------
    # STEP 2: SWARM & PARTICLE BEST VALUES
    #-----------------------------------------
    
    # Update personal & global best position
    # vergelyk nuwe fitness van hierdie particle met vorige fitness en vervang indien beter 
    
    if (fitness_val[i] > init_fit[i])
      pers_in[i,] <-  x_in[i,]
    if (fitness_val[i] > global_init_fit){
      global_best = x_in[i,]
      global_init_fit = fitness_val[i]
    # This is just to make sure that we have the right global best in the end because we reset global when it gets stuck
    }
    if (global_init_fit > gl_avoid){
      gl_avoid = global_init_fit
      global_best_final = global_best
      gl_accuracy = P
    }
    #mm <- c(mm,gl_avoid)

    #-----------------------------------------------
    # STEP 3: MUTATION 1  - AVOID EARLY CONVERGENCE
    #-----------------------------------------------
    
    # this is the first mutation that resets the swarm best after 3 iterations of equal fitness values
    if (global_init_fit == check){
      counter = counter + 1
    }
    
    if (global_init_fit != check){
      counter = 0
    }
    
    if (counter == 2){
      global_init_fit = 0 # this has to change to a vector of zeros
      global_best = numeric(num_f)
      counter = 0
      
      # this is the second mutation that flips personal best positions when the global best is rest
      for (kk in 1:num_f) {
        r <- runif(1)
        if (r <= dr && pers_in[i,kk] == 0)
          pers_in[i,kk] = 1
        if (r <= dr && pers_in[i,kk] == 1)
          pers_in[i,kk] = 0
        
      }
      
    }
    check = global_init_fit
    
  
    
    #-----------------------------------------
    # STEP 4: UPDATE VELOCITIES
    #-----------------------------------------
    
    # Update velocity
    r1 <- runif(1) # stochastic parameter 1
    r2 <- runif(1) # stohasti parameter 2
    al <- 1/pi^2
    w <- wmax - (wmax - wmin)*(q/m.l)^(al) # non-linear decreasing strategy
    
    
    for (j in 1:num_f){
      
      v[i,j] <- w*init_v[i,j] + c1*r1*(pers_in[i,j] - x_in[i,j]) + c2*r2*(global_best[j]-x_in[i,j])
      
      
      if(v[i,j] > vmax || v[i,j] < -vmax){
        v[i,j] <- vmax
      } 
      
      init_v[i,j] = v[i,j]
      
      # Sigmoid function to move from continuos to binary - between 0 and 1
      S = 1/(1+exp(-v[i,j]))
          
      # Update particle position
      if (S >= runif(1)){
        x_new[i,j] <- 1
      } else{x_new[i,j] <- 0}
      
      
    }
    x_in[i,] <- x_new[i,] # Update particle positions
  } 

# you are done with the first set of N particles move on to next m.l iteration
init_fit = fitness_val # update the fitness value of all the particles
} 
